/*
 * Decompiled with CFR 0.0.9 (FabricMC cc05e23f).
 */
package net.minecraft.world.gen.feature;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import java.util.OptionalInt;
import java.util.function.Supplier;
import net.minecraft.block.BigDripleafBlock;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.CaveVines;
import net.minecraft.block.CaveVinesHeadBlock;
import net.minecraft.block.MushroomBlock;
import net.minecraft.block.SmallDripleafBlock;
import net.minecraft.block.SweetBerryBushBlock;
import net.minecraft.fluid.FluidState;
import net.minecraft.fluid.Fluids;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.state.property.Properties;
import net.minecraft.structure.processor.StructureProcessorLists;
import net.minecraft.tag.BlockTags;
import net.minecraft.util.Identifier;
import net.minecraft.util.collection.DataPool;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.VerticalSurfaceType;
import net.minecraft.util.math.floatprovider.ClampedNormalFloatProvider;
import net.minecraft.util.math.floatprovider.UniformFloatProvider;
import net.minecraft.util.math.intprovider.BiasedToBottomIntProvider;
import net.minecraft.util.math.intprovider.ClampedIntProvider;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.IntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.util.registry.BuiltinRegistries;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.Heightmap;
import net.minecraft.world.gen.CountConfig;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.ProbabilityConfig;
import net.minecraft.world.gen.YOffset;
import net.minecraft.world.gen.decorator.CarvingMaskDecoratorConfig;
import net.minecraft.world.gen.decorator.CaveSurfaceDecoratorConfig;
import net.minecraft.world.gen.decorator.ChanceDecoratorConfig;
import net.minecraft.world.gen.decorator.ConfiguredDecorator;
import net.minecraft.world.gen.decorator.CountExtraDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseBiasedDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseDecoratorConfig;
import net.minecraft.world.gen.decorator.Decorator;
import net.minecraft.world.gen.decorator.DecoratorConfig;
import net.minecraft.world.gen.decorator.HeightmapDecoratorConfig;
import net.minecraft.world.gen.decorator.NopeDecoratorConfig;
import net.minecraft.world.gen.decorator.RangeDecoratorConfig;
import net.minecraft.world.gen.decorator.WaterDepthThresholdDecoratorConfig;
import net.minecraft.world.gen.feature.BasaltColumnsFeatureConfig;
import net.minecraft.world.gen.feature.BlockPileFeatureConfig;
import net.minecraft.world.gen.feature.ConfiguredFeature;
import net.minecraft.world.gen.feature.DeltaFeatureConfig;
import net.minecraft.world.gen.feature.DiskFeatureConfig;
import net.minecraft.world.gen.feature.DripstoneClusterFeatureConfig;
import net.minecraft.world.gen.feature.EmeraldOreFeatureConfig;
import net.minecraft.world.gen.feature.EndGatewayFeatureConfig;
import net.minecraft.world.gen.feature.EndSpikeFeature;
import net.minecraft.world.gen.feature.EndSpikeFeatureConfig;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.FeatureConfig;
import net.minecraft.world.gen.feature.FossilFeatureConfig;
import net.minecraft.world.gen.feature.GeodeCrackConfig;
import net.minecraft.world.gen.feature.GeodeFeatureConfig;
import net.minecraft.world.gen.feature.GeodeLayerConfig;
import net.minecraft.world.gen.feature.GeodeLayerThicknessConfig;
import net.minecraft.world.gen.feature.GlowLichenFeatureConfig;
import net.minecraft.world.gen.feature.GrowingPlantFeatureConfig;
import net.minecraft.world.gen.feature.HugeFungusFeatureConfig;
import net.minecraft.world.gen.feature.HugeMushroomFeatureConfig;
import net.minecraft.world.gen.feature.LargeDripstoneFeatureConfig;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.feature.RandomBooleanFeatureConfig;
import net.minecraft.world.gen.feature.RandomFeatureConfig;
import net.minecraft.world.gen.feature.RandomPatchFeatureConfig;
import net.minecraft.world.gen.feature.ReplaceBlobsFeatureConfig;
import net.minecraft.world.gen.feature.RootSystemFeatureConfig;
import net.minecraft.world.gen.feature.SimpleBlockFeatureConfig;
import net.minecraft.world.gen.feature.SimpleRandomFeatureConfig;
import net.minecraft.world.gen.feature.SingleStateFeatureConfig;
import net.minecraft.world.gen.feature.SmallDripstoneFeatureConfig;
import net.minecraft.world.gen.feature.SpringFeatureConfig;
import net.minecraft.world.gen.feature.TreeFeatureConfig;
import net.minecraft.world.gen.feature.UnderwaterMagmaFeatureConfig;
import net.minecraft.world.gen.feature.VegetationPatchFeatureConfig;
import net.minecraft.world.gen.feature.size.ThreeLayersFeatureSize;
import net.minecraft.world.gen.feature.size.TwoLayersFeatureSize;
import net.minecraft.world.gen.foliage.AcaciaFoliagePlacer;
import net.minecraft.world.gen.foliage.BlobFoliagePlacer;
import net.minecraft.world.gen.foliage.BushFoliagePlacer;
import net.minecraft.world.gen.foliage.DarkOakFoliagePlacer;
import net.minecraft.world.gen.foliage.JungleFoliagePlacer;
import net.minecraft.world.gen.foliage.LargeOakFoliagePlacer;
import net.minecraft.world.gen.foliage.MegaPineFoliagePlacer;
import net.minecraft.world.gen.foliage.PineFoliagePlacer;
import net.minecraft.world.gen.foliage.RandomSpreadFoliagePlacer;
import net.minecraft.world.gen.foliage.SpruceFoliagePlacer;
import net.minecraft.world.gen.heightprovider.BiasedToBottomHeightProvider;
import net.minecraft.world.gen.heightprovider.UniformHeightProvider;
import net.minecraft.world.gen.heightprovider.VeryBiasedToBottomHeightProvider;
import net.minecraft.world.gen.placer.ColumnPlacer;
import net.minecraft.world.gen.placer.DoublePlantPlacer;
import net.minecraft.world.gen.placer.SimpleBlockPlacer;
import net.minecraft.world.gen.stateprovider.BlockStateProvider;
import net.minecraft.world.gen.stateprovider.ForestFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PillarBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PlainsFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.RandomizedIntBlockStateProvider;
import net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider;
import net.minecraft.world.gen.stateprovider.WeightedBlockStateProvider;
import net.minecraft.world.gen.treedecorator.AlterGroundTreeDecorator;
import net.minecraft.world.gen.treedecorator.BeehiveTreeDecorator;
import net.minecraft.world.gen.treedecorator.CocoaBeansTreeDecorator;
import net.minecraft.world.gen.treedecorator.LeavesVineTreeDecorator;
import net.minecraft.world.gen.treedecorator.TrunkVineTreeDecorator;
import net.minecraft.world.gen.trunk.BendingTrunkPlacer;
import net.minecraft.world.gen.trunk.DarkOakTrunkPlacer;
import net.minecraft.world.gen.trunk.ForkingTrunkPlacer;
import net.minecraft.world.gen.trunk.GiantTrunkPlacer;
import net.minecraft.world.gen.trunk.LargeOakTrunkPlacer;
import net.minecraft.world.gen.trunk.MegaJungleTrunkPlacer;
import net.minecraft.world.gen.trunk.StraightTrunkPlacer;

public class ConfiguredFeatures {
    public static final ConfiguredFeature<?, ?> END_SPIKE = ConfiguredFeatures.register("end_spike", Feature.END_SPIKE.configure(new EndSpikeFeatureConfig(false, (List<EndSpikeFeature.Spike>)ImmutableList.of(), null)));
    public static final ConfiguredFeature<?, ?> END_GATEWAY = ConfiguredFeatures.register("end_gateway", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig(ServerWorld.END_SPAWN_POS, true)).decorate((ConfiguredDecorator)Decorator.END_GATEWAY.configure(DecoratorConfig.DEFAULT))).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP).spreadHorizontally()).applyChance(700));
    public static final ConfiguredFeature<?, ?> END_GATEWAY_DELAYED = ConfiguredFeatures.register("end_gateway_delayed", Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig()));
    public static final ConfiguredFeature<?, ?> CHORUS_PLANT = ConfiguredFeatures.register("chorus_plant", (ConfiguredFeature)Feature.CHORUS_PLANT.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeatRandomly(4));
    public static final ConfiguredFeature<?, ?> END_ISLAND = ConfiguredFeatures.register("end_island", Feature.END_ISLAND.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> END_ISLAND_DECORATED = ConfiguredFeatures.register("end_island_decorated", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)END_ISLAND.uniformRange(YOffset.fixed(55), YOffset.fixed(70))).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(1, 0.25f, 1))).applyChance(14));
    public static final ConfiguredFeature<?, ?> DELTA = ConfiguredFeatures.register("delta", Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(States.LAVA_BLOCK, States.MAGMA_BLOCK, UniformIntProvider.create(3, 7), UniformIntProvider.create(0, 2))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(40))));
    public static final ConfiguredFeature<?, ?> SMALL_BASALT_COLUMNS = ConfiguredFeatures.register("small_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(ConstantIntProvider.create(1), UniformIntProvider.create(1, 4))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
    public static final ConfiguredFeature<?, ?> LARGE_BASALT_COLUMNS = ConfiguredFeatures.register("large_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(UniformIntProvider.create(2, 3), UniformIntProvider.create(5, 10))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(2))));
    public static final ConfiguredFeature<?, ?> BASALT_BLOBS = ConfiguredFeatures.register("basalt_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new ReplaceBlobsFeatureConfig(States.NETHERRACK, States.BASALT, UniformIntProvider.create(3, 7))).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(75));
    public static final ConfiguredFeature<?, ?> BLACKSTONE_BLOBS = ConfiguredFeatures.register("blackstone_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new ReplaceBlobsFeatureConfig(States.NETHERRACK, States.BLACKSTONE, UniformIntProvider.create(3, 7))).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(25));
    public static final ConfiguredFeature<?, ?> GLOWSTONE_EXTRA = ConfiguredFeatures.register("glowstone_extra", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(BiasedToBottomIntProvider.create(0, 9)));
    public static final ConfiguredFeature<?, ?> GLOWSTONE = ConfiguredFeatures.register("glowstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> CRIMSON_FOREST_VEGETATION = ConfiguredFeatures.register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(Configs.CRIMSON_ROOTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(6))));
    public static final ConfiguredFeature<?, ?> WARPED_FOREST_VEGETATION = ConfiguredFeatures.register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(Configs.WARPED_ROOTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(5))));
    public static final ConfiguredFeature<?, ?> NETHER_SPROUTS = ConfiguredFeatures.register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configure(Configs.NETHER_SPROUTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
    public static final ConfiguredFeature<?, ?> TWISTING_VINES = ConfiguredFeatures.register("twisting_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.TWISTING_VINES.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> WEEPING_VINES = ConfiguredFeatures.register("weeping_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.WEEPING_VINES.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> BASALT_PILLAR = ConfiguredFeatures.register("basalt_pillar", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BASALT_PILLAR.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> SEAGRASS_COLD = ConfiguredFeatures.register("seagrass_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(32)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_COLD = ConfiguredFeatures.register("seagrass_deep_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(40)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_NORMAL = ConfiguredFeatures.register("seagrass_normal", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_RIVER = ConfiguredFeatures.register("seagrass_river", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.4f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP = ConfiguredFeatures.register("seagrass_deep", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_SWAMP = ConfiguredFeatures.register("seagrass_swamp", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.6f)).repeat(64)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_WARM = ConfiguredFeatures.register("seagrass_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(80)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_WARM = ConfiguredFeatures.register("seagrass_deep_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(80)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> SEA_PICKLE = ConfiguredFeatures.register("sea_pickle", (ConfiguredFeature)Feature.SEA_PICKLE.configure(new CountConfig(20)).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP).applyChance(16));
    public static final ConfiguredFeature<?, ?> ICE_SPIKE = ConfiguredFeatures.register("ice_spike", (ConfiguredFeature)Feature.ICE_SPIKE.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(3));
    public static final ConfiguredFeature<?, ?> ICE_PATCH = ConfiguredFeatures.register("ice_patch", (ConfiguredFeature)Feature.ICE_PATCH.configure(new DiskFeatureConfig(States.PACKED_ICE, UniformIntProvider.create(2, 3), 1, ImmutableList.of(States.DIRT, States.GRASS_BLOCK, States.PODZOL, States.COARSE_DIRT, States.MYCELIUM, States.SNOW_BLOCK, States.ICE))).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(2));
    public static final ConfiguredFeature<?, ?> FOREST_ROCK = ConfiguredFeatures.register("forest_rock", (ConfiguredFeature)Feature.FOREST_ROCK.configure(new SingleStateFeatureConfig(States.MOSSY_COBBLESTONE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeatRandomly(2));
    public static final ConfiguredFeature<?, ?> SEAGRASS_SIMPLE = ConfiguredFeatures.register("seagrass_simple", ((ConfiguredFeature)Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new SimpleBlockStateProvider(States.SEAGRASS), ImmutableList.of(States.STONE), ImmutableList.of(States.WATER_BLOCK), ImmutableList.of(States.WATER_BLOCK))).applyChance(10)).decorate((ConfiguredDecorator)Decorator.CARVING_MASK.configure(new CarvingMaskDecoratorConfig(GenerationStep.Carver.LIQUID))));
    public static final ConfiguredFeature<?, ?> ICEBERG_PACKED = ConfiguredFeatures.register("iceberg_packed", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(States.PACKED_ICE)).decorate((ConfiguredDecorator)Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(16));
    public static final ConfiguredFeature<?, ?> ICEBERG_BLUE = ConfiguredFeatures.register("iceberg_blue", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(States.BLUE_ICE)).decorate((ConfiguredDecorator)Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(200));
    public static final ConfiguredFeature<?, ?> KELP_COLD = ConfiguredFeatures.register("kelp_cold", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(120, 80.0, 0.0))));
    public static final ConfiguredFeature<?, ?> KELP_WARM = ConfiguredFeatures.register("kelp_warm", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(80, 80.0, 0.0))));
    public static final ConfiguredFeature<?, ?> BLUE_ICE = ConfiguredFeatures.register("blue_ice", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BLUE_ICE.configure(FeatureConfig.DEFAULT).uniformRange(YOffset.fixed(30), YOffset.fixed(61))).spreadHorizontally()).repeatRandomly(19));
    public static final ConfiguredFeature<?, ?> BAMBOO_LIGHT = ConfiguredFeatures.register("bamboo_light", (ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.0f)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(16));
    public static final ConfiguredFeature<?, ?> BAMBOO = ConfiguredFeatures.register("bamboo", ((ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.2f)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP_WORLD_SURFACE).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(160, 80.0, 0.3))));
    public static final ConfiguredFeature<?, ?> VINES = ConfiguredFeatures.register("vines", (ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_VINES = ConfiguredFeatures.register("prototype_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).uniformRange(YOffset.fixed(64), YOffset.fixed(100))).spreadHorizontally()).repeat(127));
    public static final ConfiguredFeature<?, ?> LAKE_WATER = ConfiguredFeatures.register("lake_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LAKE.configure(new SingleStateFeatureConfig(States.WATER_BLOCK)).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).applyChance(4));
    public static final ConfiguredFeature<?, ?> LAKE_LAVA = ConfiguredFeatures.register("lake_lava", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LAKE.configure(new SingleStateFeatureConfig(States.LAVA_BLOCK)).decorate((ConfiguredDecorator)Decorator.LAVA_LAKE.configure(new ChanceDecoratorConfig(80))).range(new RangeDecoratorConfig(BiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.getTop(), 8)))).spreadHorizontally()).applyChance(8));
    public static final ConfiguredFeature<?, ?> DISK_CLAY = ConfiguredFeatures.register("disk_clay", Feature.DISK.configure(new DiskFeatureConfig(States.CLAY, UniformIntProvider.create(2, 3), 1, ImmutableList.of(States.DIRT, States.CLAY))).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> DISK_GRAVEL = ConfiguredFeatures.register("disk_gravel", Feature.DISK.configure(new DiskFeatureConfig(States.GRAVEL, UniformIntProvider.create(2, 5), 2, ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> DISK_SAND = ConfiguredFeatures.register("disk_sand", (ConfiguredFeature)Feature.DISK.configure(new DiskFeatureConfig(States.SAND, UniformIntProvider.create(2, 6), 2, ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorate((ConfiguredDecorator)Decorators.SQUARE_TOP_SOLID_HEIGHTMAP).repeat(3));
    public static final ConfiguredFeature<?, ?> FREEZE_TOP_LAYER = ConfiguredFeatures.register("freeze_top_layer", Feature.FREEZE_TOP_LAYER.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> BONUS_CHEST = ConfiguredFeatures.register("bonus_chest", Feature.BONUS_CHEST.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> VOID_START_PLATFORM = ConfiguredFeatures.register("void_start_platform", Feature.VOID_START_PLATFORM.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> MONSTER_ROOM = ConfiguredFeatures.register("monster_room", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.MONSTER_ROOM.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> DESERT_WELL = ConfiguredFeatures.register("desert_well", (ConfiguredFeature)Feature.DESERT_WELL.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).applyChance(1000));
    private static final ImmutableList<Identifier> FOSSIL_STRUCTURES = ImmutableList.of(new Identifier("fossil/spine_1"), new Identifier("fossil/spine_2"), new Identifier("fossil/spine_3"), new Identifier("fossil/spine_4"), new Identifier("fossil/skull_1"), new Identifier("fossil/skull_2"), new Identifier("fossil/skull_3"), new Identifier("fossil/skull_4"));
    private static final ImmutableList<Identifier> FOSSIL_OVERLAY_STRUCTURES = ImmutableList.of(new Identifier("fossil/spine_1_coal"), new Identifier("fossil/spine_2_coal"), new Identifier("fossil/spine_3_coal"), new Identifier("fossil/spine_4_coal"), new Identifier("fossil/skull_1_coal"), new Identifier("fossil/skull_2_coal"), new Identifier("fossil/skull_3_coal"), new Identifier("fossil/skull_4_coal"));
    public static final ConfiguredFeature<?, ?> FOSSIL = ConfiguredFeatures.register("fossil", (ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_COAL, 4)).applyChance(64));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_FOSSIL_UPPER = ConfiguredFeatures.register("prototype_fossil_upper", (ConfiguredFeature)((ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_COAL, 4)).uniformRange(YOffset.fixed(0), YOffset.getTop())).applyChance(64));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_FOSSIL_LOWER = ConfiguredFeatures.register("prototype_fossil_lower", (ConfiguredFeature)((ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_DIAMONDS, 4)).uniformRange(YOffset.getBottom(), YOffset.fixed(-8))).applyChance(64));
    public static final ConfiguredFeature<?, ?> SPRING_LAVA_DOUBLE = ConfiguredFeatures.register("spring_lava_double", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.LAVA_SPRING_CONFIG).range(new RangeDecoratorConfig(VeryBiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(40));
    public static final ConfiguredFeature<?, ?> SPRING_LAVA = ConfiguredFeatures.register("spring_lava", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.LAVA_SPRING_CONFIG).range(new RangeDecoratorConfig(VeryBiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> SPRING_DELTA = ConfiguredFeatures.register("spring_delta", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.LAVA_FLUID, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).range(Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED = ConfiguredFeatures.register("spring_closed", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.ENCLOSED_NETHER_SPRING_CONFIG).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED_DOUBLE = ConfiguredFeatures.register("spring_closed_double", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.ENCLOSED_NETHER_SPRING_CONFIG).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(32));
    public static final ConfiguredFeature<?, ?> SPRING_OPEN = ConfiguredFeatures.register("spring_open", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.LAVA_FLUID, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK))).range(Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> SPRING_WATER = ConfiguredFeatures.register("spring_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.WATER_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).range(new RangeDecoratorConfig(BiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_SPRING_WATER = ConfiguredFeatures.register("prototype_spring_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.WATER_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF, new Block[0]))).uniformRange(YOffset.getBottom(), YOffset.getTop())).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> PILE_HAY = ConfiguredFeatures.register("pile_hay", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new PillarBlockStateProvider(Blocks.HAY_BLOCK))));
    public static final ConfiguredFeature<?, ?> PILE_MELON = ConfiguredFeatures.register("pile_melon", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.MELON))));
    public static final ConfiguredFeature<?, ?> PILE_SNOW = ConfiguredFeatures.register("pile_snow", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.SNOW))));
    public static final ConfiguredFeature<?, ?> PILE_ICE = ConfiguredFeatures.register("pile_ice", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.BLUE_ICE, 1).add(States.PACKED_ICE, 5)))));
    public static final ConfiguredFeature<?, ?> PILE_PUMPKIN = ConfiguredFeatures.register("pile_pumpkin", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.PUMPKIN, 19).add(States.JACK_O_LANTERN, 1)))));
    public static final ConfiguredFeature<?, ?> PATCH_FIRE = ConfiguredFeatures.register("patch_fire", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.FIRE), SimpleBlockPlacer.INSTANCE).tries(64).whitelist(ImmutableSet.of(States.NETHERRACK.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.FIRE));
    public static final ConfiguredFeature<?, ?> PATCH_SOUL_FIRE = ConfiguredFeatures.register("patch_soul_fire", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SOUL_FIRE), new SimpleBlockPlacer()).tries(64).whitelist(ImmutableSet.of(States.SOUL_SOIL.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.FIRE));
    public static final ConfiguredFeature<?, ?> PATCH_BROWN_MUSHROOM = ConfiguredFeatures.register("patch_brown_mushroom", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_RED_MUSHROOM = ConfiguredFeatures.register("patch_red_mushroom", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_CRIMSON_ROOTS = ConfiguredFeatures.register("patch_crimson_roots", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.CRIMSON_ROOTS), new SimpleBlockPlacer()).tries(64).cannotProject().build()).range(Decorators.BOTTOM_TO_TOP));
    public static final ConfiguredFeature<?, ?> PATCH_SUNFLOWER = ConfiguredFeatures.register("patch_sunflower", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SUNFLOWER), new DoublePlantPlacer()).tries(64).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(10));
    public static final ConfiguredFeature<?, ?> PATCH_PUMPKIN = ConfiguredFeatures.register("patch_pumpkin", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.PUMPKIN), SimpleBlockPlacer.INSTANCE).tries(64).whitelist(ImmutableSet.of(States.GRASS_BLOCK.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(32));
    public static final ConfiguredFeature<?, ?> PATCH_TAIGA_GRASS = ConfiguredFeatures.register("patch_taiga_grass", Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_BUSH = ConfiguredFeatures.register("patch_berry_bush", Feature.RANDOM_PATCH.configure(Configs.SWEET_BERRY_BUSH_CONFIG));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_PLAIN = ConfiguredFeatures.register("patch_grass_plain", ((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE)).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 5, 10))));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_FOREST = ConfiguredFeatures.register("patch_grass_forest", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(2));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_BADLANDS = ConfiguredFeatures.register("patch_grass_badlands", Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_SAVANNA = ConfiguredFeatures.register("patch_grass_savanna", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_NORMAL = ConfiguredFeatures.register("patch_grass_normal", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(5));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA_2 = ConfiguredFeatures.register("patch_grass_taiga_2", Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA = ConfiguredFeatures.register("patch_grass_taiga", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_JUNGLE = ConfiguredFeatures.register("patch_grass_jungle", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.LUSH_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(25));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_2 = ConfiguredFeatures.register("patch_dead_bush_2", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(2));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH = ConfiguredFeatures.register("patch_dead_bush", Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_BADLANDS = ConfiguredFeatures.register("patch_dead_bush_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_MELON = ConfiguredFeatures.register("patch_melon", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.MELON), SimpleBlockPlacer.INSTANCE).tries(64).whitelist(ImmutableSet.of(States.GRASS_BLOCK.getBlock())).canReplace().cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_SPARSE = ConfiguredFeatures.register("patch_berry_sparse", PATCH_BERRY_BUSH.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_DECORATED = ConfiguredFeatures.register("patch_berry_decorated", (ConfiguredFeature)PATCH_BERRY_BUSH.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(12));
    public static final ConfiguredFeature<?, ?> PATCH_WATERLILLY = ConfiguredFeatures.register("patch_waterlilly", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILY_PAD), SimpleBlockPlacer.INSTANCE).tries(10).build()).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(4));
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS_2 = ConfiguredFeatures.register("patch_tall_grass_2", ((ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TALL_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 0, 7))));
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS = ConfiguredFeatures.register("patch_tall_grass", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TALL_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_LARGE_FERN = ConfiguredFeatures.register("patch_large_fern", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LARGE_FERN), new DoublePlantPlacer()).tries(64).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS = ConfiguredFeatures.register("patch_cactus", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.CACTUS), new ColumnPlacer(BiasedToBottomIntProvider.create(1, 3))).tries(10).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DESERT = ConfiguredFeatures.register("patch_cactus_desert", (ConfiguredFeature)PATCH_CACTUS.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(10));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DECORATED = ConfiguredFeatures.register("patch_cactus_decorated", (ConfiguredFeature)PATCH_CACTUS.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(5));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_SWAMP = ConfiguredFeatures.register("patch_sugar_cane_swamp", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_DESERT = ConfiguredFeatures.register("patch_sugar_cane_desert", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(60));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_BADLANDS = ConfiguredFeatures.register("patch_sugar_cane_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(13));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE = ConfiguredFeatures.register("patch_sugar_cane", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(10));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NETHER = ConfiguredFeatures.register("brown_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_BROWN_MUSHROOM.range(Decorators.BOTTOM_TO_TOP)).applyChance(2));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NETHER = ConfiguredFeatures.register("red_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_RED_MUSHROOM.range(Decorators.BOTTOM_TO_TOP)).applyChance(2));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NORMAL = ConfiguredFeatures.register("brown_mushroom_normal", (ConfiguredFeature)PATCH_BROWN_MUSHROOM.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(4));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NORMAL = ConfiguredFeatures.register("red_mushroom_normal", (ConfiguredFeature)PATCH_RED_MUSHROOM.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(8));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_TAIGA = ConfiguredFeatures.register("brown_mushroom_taiga", ((ConfiguredFeature)PATCH_BROWN_MUSHROOM.applyChance(4)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_TAIGA = ConfiguredFeatures.register("red_mushroom_taiga", ((ConfiguredFeature)PATCH_RED_MUSHROOM.applyChance(8)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_GIANT = ConfiguredFeatures.register("brown_mushroom_giant", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(3));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_GIANT = ConfiguredFeatures.register("red_mushroom_giant", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(3));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_SWAMP = ConfiguredFeatures.register("brown_mushroom_swamp", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(8));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_SWAMP = ConfiguredFeatures.register("red_mushroom_swamp", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(8));
    public static final ImmutableList<OreFeatureConfig.Target> IRON_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.IRON_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_IRON_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> REDSTONE_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.REDSTONE_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_REDSTONE_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> GOLD_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.GOLD_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_GOLD_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> DIAMOND_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.DIAMOND_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_DIAMOND_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> LAPIS_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.LAPIS_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_LAPIS_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> EMERALD_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.EMERALD_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_EMERALD_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> COPPER_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.COPPER_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_COPPER_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> COAL_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.COAL_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.DEEPSLATE_COAL_ORE));
    public static final ImmutableList<OreFeatureConfig.Target> INFESTED_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, States.INFESTED_STONE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, States.INFESTED_DEEPSLATE));
    public static final OreFeatureConfig IRON_CONFIG = new OreFeatureConfig(IRON_ORE_TARGETS, 9);
    public static final OreFeatureConfig REDSTONE_CONFIG = new OreFeatureConfig(REDSTONE_ORE_TARGETS, 8);
    public static final ConfiguredFeature<?, ?> ORE_MAGMA = ConfiguredFeatures.register("ore_magma", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.MAGMA_BLOCK, 33)).uniformRange(YOffset.fixed(27), YOffset.fixed(36))).spreadHorizontally()).repeat(4));
    public static final ConfiguredFeature<?, ?> ORE_SOUL_SAND = ConfiguredFeatures.register("ore_soul_sand", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.SOUL_SAND, 12)).uniformRange(YOffset.getBottom(), YOffset.fixed(31))).spreadHorizontally()).repeat(12));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_DELTAS = ConfiguredFeatures.register("ore_gold_deltas", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_GOLD_ORE, 10)).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_DELTAS = ConfiguredFeatures.register("ore_quartz_deltas", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(32));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_NETHER = ConfiguredFeatures.register("ore_gold_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_GOLD_ORE, 10)).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_NETHER = ConfiguredFeatures.register("ore_quartz_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).range(Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL_NETHER = ConfiguredFeatures.register("ore_gravel_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.GRAVEL, 33)).uniformRange(YOffset.fixed(5), YOffset.fixed(41))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_BLACKSTONE = ConfiguredFeatures.register("ore_blackstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.BLACKSTONE, 33)).uniformRange(YOffset.fixed(5), YOffset.fixed(31))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_DIRT = ConfiguredFeatures.register("ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIRT, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIRT = ConfiguredFeatures.register("prototype_ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIRT, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(15));
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL = ConfiguredFeatures.register("ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRAVEL, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GRAVEL = ConfiguredFeatures.register("prototype_ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRAVEL, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(12));
    public static final ConfiguredFeature<?, ?> ORE_GRANITE = ConfiguredFeatures.register("ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRANITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GRANITE = ConfiguredFeatures.register("prototype_ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRANITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_DIORITE = ConfiguredFeatures.register("ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIORITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIORITE = ConfiguredFeatures.register("prototype_ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIORITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_ANDESITE = ConfiguredFeatures.register("ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.ANDESITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_ANDESITE = ConfiguredFeatures.register("prototype_ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.ANDESITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_TUFF = ConfiguredFeatures.register("ore_tuff", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.TUFF, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(16))).spreadHorizontally()).repeat(1));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_TUFF = ConfiguredFeatures.register("prototype_ore_tuff", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.TUFF, 64)).uniformRange(YOffset.getBottom(), YOffset.fixed(0))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_DEEPSLATE = ConfiguredFeatures.register("ore_deepslate", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DEEPSLATE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(16))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_COAL = ConfiguredFeatures.register("ore_coal", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17)).uniformRange(YOffset.getBottom(), YOffset.fixed(127))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COAL_UPPER = ConfiguredFeatures.register("prototype_ore_coal_upper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17)).uniformRange(YOffset.fixed(136), YOffset.getTop())).spreadHorizontally()).repeat(30));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COAL_LOWER = ConfiguredFeatures.register("prototype_ore_coal_lower", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17, 0.5f)).triangleRange(YOffset.fixed(0), YOffset.fixed(192))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_IRON = ConfiguredFeatures.register("ore_iron", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(IRON_ORE_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_UPPER = ConfiguredFeatures.register("prototype_ore_iron_upper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(IRON_CONFIG).triangleRange(YOffset.fixed(128), YOffset.fixed(384))).spreadHorizontally()).repeat(40));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_MIDDLE = ConfiguredFeatures.register("prototype_ore_iron_middle", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(IRON_CONFIG).triangleRange(YOffset.fixed(-24), YOffset.fixed(56))).spreadHorizontally()).repeat(5));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_SMALL = ConfiguredFeatures.register("prototype_ore_iron_small", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(IRON_ORE_TARGETS, 4)).uniformRange(YOffset.getBottom(), YOffset.fixed(64))).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_EXTRA = ConfiguredFeatures.register("ore_gold_extra", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9)).uniformRange(YOffset.fixed(32), YOffset.fixed(79))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_GOLD = ConfiguredFeatures.register("ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(31))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GOLD = ConfiguredFeatures.register("prototype_ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9, 0.5f)).triangleRange(YOffset.fixed(-64), YOffset.fixed(32))).spreadHorizontally()).repeat(4));
    public static final ConfiguredFeature<?, ?> ORE_REDSTONE = ConfiguredFeatures.register("ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).uniformRange(YOffset.getBottom(), YOffset.fixed(15))).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_REDSTONE = ConfiguredFeatures.register("prototype_ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).uniformRange(YOffset.getBottom(), YOffset.fixed(15))).spreadHorizontally()).repeat(4));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_REDSTONE_LOWER = ConfiguredFeatures.register("prototype_ore_redstone_lower", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).triangleRange(YOffset.aboveBottom(-32), YOffset.aboveBottom(32))).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> ORE_DIAMOND = ConfiguredFeatures.register("ore_diamond", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(15))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIAMOND = ConfiguredFeatures.register("prototype_ore_diamond", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 4, 0.5f)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80))).spreadHorizontally()).repeat(6));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIAMOND_LARGE = ConfiguredFeatures.register("prototype_ore_diamond_large", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 12, 0.7f)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80))).spreadHorizontally()).applyChance(9));
    public static final ConfiguredFeature<?, ?> ORE_LAPIS = ConfiguredFeatures.register("ore_lapis", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7)).triangleRange(YOffset.fixed(0), YOffset.fixed(30))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_LAPIS = ConfiguredFeatures.register("prototype_ore_lapis", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7)).triangleRange(YOffset.fixed(-32), YOffset.fixed(32))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_LAPIS_BURIED = ConfiguredFeatures.register("prototype_ore_lapis_buried", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7, 1.0f)).uniformRange(YOffset.getBottom(), YOffset.fixed(64))).spreadHorizontally()).repeat(4));
    public static final ConfiguredFeature<?, ?> ORE_INFESTED = ConfiguredFeatures.register("ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(INFESTED_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(7));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_INFESTED = ConfiguredFeatures.register("prototype_ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(INFESTED_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(14));
    public static final ConfiguredFeature<?, ?> ORE_EMERALD = ConfiguredFeatures.register("ore_emerald", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.REPLACE_SINGLE_BLOCK.configure(new EmeraldOreFeatureConfig(EMERALD_ORE_TARGETS)).uniformRange(YOffset.fixed(4), YOffset.fixed(31))).spreadHorizontally()).repeat(UniformIntProvider.create(3, 8)));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_EMERALD = ConfiguredFeatures.register("prototype_ore_emerald", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(EMERALD_ORE_TARGETS, 3)).triangleRange(YOffset.fixed(32), YOffset.fixed(480))).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_LARGE = ConfiguredFeatures.register("ore_debris_large", (ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, States.ANCIENT_DEBRIS, 3, 1.0f)).triangleRange(YOffset.fixed(8), YOffset.fixed(24))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_SMALL = ConfiguredFeatures.register("ore_debris_small", (ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, States.ANCIENT_DEBRIS, 2, 1.0f)).range(Decorators.BOTTOM_TO_TOP_OFFSET_8)).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> ORE_COPPER = ConfiguredFeatures.register("ore_copper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COPPER_ORE_TARGETS, 10)).triangleRange(YOffset.fixed(0), YOffset.fixed(96))).spreadHorizontally()).repeat(6));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COPPER = ConfiguredFeatures.register("prototype_ore_copper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COPPER_ORE_TARGETS, 10)).uniformRange(YOffset.fixed(0), YOffset.fixed(63))).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> ORE_CLAY = ConfiguredFeatures.register("ore_clay", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.CLAY, 33)).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(15));
    public static final ConfiguredFeature<?, ?> DRIPSTONE_CLUSTER = ConfiguredFeatures.register("dripstone_cluster", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.DRIPSTONE_CLUSTER.configure(new DripstoneClusterFeatureConfig(12, UniformIntProvider.create(3, 6), UniformIntProvider.create(2, 8), 1, 3, UniformIntProvider.create(2, 4), UniformFloatProvider.create(0.3f, 0.7f), ClampedNormalFloatProvider.create(0.1f, 0.3f, 0.1f, 0.9f), 0.1f, 3, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(10, 20)));
    public static final ConfiguredFeature<?, ?> LARGE_DRIPSTONE = ConfiguredFeatures.register("large_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LARGE_DRIPSTONE.configure(new LargeDripstoneFeatureConfig(30, UniformIntProvider.create(3, 19), UniformFloatProvider.create(0.4f, 2.0f), 0.33f, UniformFloatProvider.create(0.3f, 0.9f), UniformFloatProvider.create(0.4f, 1.0f), UniformFloatProvider.create(0.0f, 0.3f), 4, 0.6f)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(2, 10)));
    public static final ConfiguredFeature<?, ?> SMALL_DRIPSTONE = ConfiguredFeatures.register("small_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SMALL_DRIPSTONE.configure(new SmallDripstoneFeatureConfig(5, 10, 2, 0.2f)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(40, 120)));
    public static final ConfiguredFeature<?, ?> RARE_DRIPSTONE_CLUSTER = ConfiguredFeatures.register("rare_dripstone_cluster", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.DRIPSTONE_CLUSTER.configure(new DripstoneClusterFeatureConfig(12, UniformIntProvider.create(3, 3), UniformIntProvider.create(2, 6), 1, 3, UniformIntProvider.create(2, 2), UniformFloatProvider.create(0.3f, 0.4f), ClampedNormalFloatProvider.create(0.1f, 0.3f, 0.1f, 0.9f), 0.1f, 3, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(10, 10))).applyChance(25));
    public static final ConfiguredFeature<?, ?> RARE_SMALL_DRIPSTONE = ConfiguredFeatures.register("rare_small_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SMALL_DRIPSTONE.configure(new SmallDripstoneFeatureConfig(5, 10, 2, 0.2f)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(40, 80))).applyChance(30));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_UNDERWATER_MAGMA = ConfiguredFeatures.register("prototype_underwater_magma", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.UNDERWATER_MAGMA.configure(new UnderwaterMagmaFeatureConfig(5, 1, 0.5f)).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(39))).repeat(UniformIntProvider.create(4, 10)));
    public static final ConfiguredFeature<?, ?> GLOW_LICHEN = ConfiguredFeatures.register("glow_lichen", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOW_LICHEN.configure(new GlowLichenFeatureConfig(20, false, true, true, 0.5f, ImmutableList.of(Blocks.STONE.getDefaultState(), Blocks.ANDESITE.getDefaultState(), Blocks.DIORITE.getDefaultState(), Blocks.GRANITE.getDefaultState(), Blocks.DRIPSTONE_BLOCK.getDefaultState(), Blocks.CALCITE.getDefaultState(), Blocks.TUFF.getDefaultState(), Blocks.DEEPSLATE.getDefaultState()))).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(54))).repeat(UniformIntProvider.create(20, 30)));
    public static final ConfiguredFeature<?, ?> PROTOTYPE_GLOW_LICHEN = ConfiguredFeatures.register("prototype_glow_lichen", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOW_LICHEN.configure(new GlowLichenFeatureConfig(20, false, true, true, 0.5f, ImmutableList.of(Blocks.STONE.getDefaultState(), Blocks.ANDESITE.getDefaultState(), Blocks.DIORITE.getDefaultState(), Blocks.GRANITE.getDefaultState(), Blocks.DRIPSTONE_BLOCK.getDefaultState(), Blocks.CALCITE.getDefaultState(), Blocks.TUFF.getDefaultState(), Blocks.DEEPSLATE.getDefaultState()))).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(54))).repeat(UniformIntProvider.create(40, 60)));
    public static final ConfiguredFeature<?, ?> CRIMSON_FUNGI = ConfiguredFeatures.register("crimson_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_NOT_PLANTED_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
    public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> CRIMSON_FUNGI_PLANTED = ConfiguredFeatures.register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_CONFIG));
    public static final ConfiguredFeature<?, ?> WARPED_FUNGI = ConfiguredFeatures.register("warped_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_NOT_PLANTED_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
    public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> WARPED_FUNGI_PLANTED = ConfiguredFeatures.register("warped_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_CONFIG));
    public static final ConfiguredFeature<?, ?> HUGE_BROWN_MUSHROOM = ConfiguredFeatures.register("huge_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(States.BROWN_MUSHROOM_BLOCK), new SimpleBlockStateProvider(States.MUSHROOM_STEM), 3)));
    public static final ConfiguredFeature<?, ?> HUGE_RED_MUSHROOM = ConfiguredFeatures.register("huge_red_mushroom", Feature.HUGE_RED_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(States.RED_MUSHROOM_BLOCK), new SimpleBlockStateProvider(States.MUSHROOM_STEM), 2)));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK = ConfiguredFeatures.register("oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new StraightTrunkPlacer(4, 2, 0), new SimpleBlockStateProvider(States.OAK_LEAVES), new SimpleBlockStateProvider(States.OAK_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> DARK_OAK = ConfiguredFeatures.register("dark_oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.DARK_OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), new SimpleBlockStateProvider(States.DARK_OAK_LEAVES), new SimpleBlockStateProvider(States.DARK_OAK_SAPLING), new DarkOakFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH = ConfiguredFeatures.register("birch", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.BIRCH_LOG), new StraightTrunkPlacer(5, 2, 0), new SimpleBlockStateProvider(States.BIRCH_LEAVES), new SimpleBlockStateProvider(States.BIRCH_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> ACACIA = ConfiguredFeatures.register("acacia", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), new SimpleBlockStateProvider(States.ACACIA_LEAVES), new SimpleBlockStateProvider(States.ACACIA_SAPLING), new AcaciaFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> SPRUCE = ConfiguredFeatures.register("spruce", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new StraightTrunkPlacer(5, 2, 1), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new SimpleBlockStateProvider(States.SPRUCE_SAPLING), new SpruceFoliagePlacer(UniformIntProvider.create(2, 3), UniformIntProvider.create(0, 2), UniformIntProvider.create(1, 2)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> PINE = ConfiguredFeatures.register("pine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new StraightTrunkPlacer(6, 4, 0), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new SimpleBlockStateProvider(States.SPRUCE_SAPLING), new PineFoliagePlacer(ConstantIntProvider.create(1), ConstantIntProvider.create(1), UniformIntProvider.create(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE = ConfiguredFeatures.register("jungle_tree", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new StraightTrunkPlacer(4, 8, 0), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new SimpleBlockStateProvider(States.JUNGLE_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new CocoaBeansTreeDecorator(0.2f), TrunkVineTreeDecorator.INSTANCE, LeavesVineTreeDecorator.INSTANCE)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK = ConfiguredFeatures.register("fancy_oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new LargeOakTrunkPlacer(3, 11, 0), new SimpleBlockStateProvider(States.OAK_LEAVES), new SimpleBlockStateProvider(States.OAK_SAPLING), new LargeOakFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE_NO_VINE = ConfiguredFeatures.register("jungle_tree_no_vine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new StraightTrunkPlacer(4, 8, 0), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new SimpleBlockStateProvider(States.JUNGLE_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_JUNGLE_TREE = ConfiguredFeatures.register("mega_jungle_tree", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new MegaJungleTrunkPlacer(10, 2, 19), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new SimpleBlockStateProvider(States.JUNGLE_SAPLING), new JungleFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(TrunkVineTreeDecorator.INSTANCE, LeavesVineTreeDecorator.INSTANCE)).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_SPRUCE = ConfiguredFeatures.register("mega_spruce", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new GiantTrunkPlacer(13, 2, 14), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new SimpleBlockStateProvider(States.SPRUCE_SAPLING), new MegaPineFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0), UniformIntProvider.create(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(States.PODZOL)))).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_PINE = ConfiguredFeatures.register("mega_pine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new GiantTrunkPlacer(13, 2, 14), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new SimpleBlockStateProvider(States.SPRUCE_SAPLING), new MegaPineFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0), UniformIntProvider.create(3, 7)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(States.PODZOL)))).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> SUPER_BIRCH_BEES_0002 = ConfiguredFeatures.register("super_birch_bees_0002", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.BIRCH_LOG), new StraightTrunkPlacer(5, 2, 6), new SimpleBlockStateProvider(States.BIRCH_LEAVES), new SimpleBlockStateProvider(States.BIRCH_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().decorators(ImmutableList.of(Decorators.VERY_RARE_BEEHIVES_TREES)).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> SWAMP_OAK = ConfiguredFeatures.register("swamp_oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new StraightTrunkPlacer(5, 3, 0), new SimpleBlockStateProvider(States.OAK_LEAVES), new SimpleBlockStateProvider(States.OAK_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(3), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(LeavesVineTreeDecorator.INSTANCE)).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_BUSH = ConfiguredFeatures.register("jungle_bush", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new StraightTrunkPlacer(1, 0, 0), new SimpleBlockStateProvider(States.OAK_LEAVES), new SimpleBlockStateProvider(States.OAK_SAPLING), new BushFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> AZALEA_TREE = ConfiguredFeatures.register("azalea_tree", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new BendingTrunkPlacer(4, 2, 0, 3, UniformIntProvider.create(1, 2)), new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.AZALEA_LEAVES, 3).add(States.FLOWERING_AZALEA_LEAVES, 1)), new SimpleBlockStateProvider(States.AZALEA), new RandomSpreadFoliagePlacer(ConstantIntProvider.create(3), ConstantIntProvider.create(0), ConstantIntProvider.create(2), 50), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(new SimpleBlockStateProvider(Blocks.ROOTED_DIRT.getDefaultState())).forceDirt().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_0002 = ConfiguredFeatures.register("oak_bees_0002", Feature.TREE.configure(OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_002 = ConfiguredFeatures.register("oak_bees_002", Feature.TREE.configure(OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_005 = ConfiguredFeatures.register("oak_bees_005", Feature.TREE.configure(OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_0002 = ConfiguredFeatures.register("birch_bees_0002", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators(ImmutableList.of(Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_002 = ConfiguredFeatures.register("birch_bees_002", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators(ImmutableList.of(Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_005 = ConfiguredFeatures.register("birch_bees_005", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators(ImmutableList.of(Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_0002 = ConfiguredFeatures.register("fancy_oak_bees_0002", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_002 = ConfiguredFeatures.register("fancy_oak_bees_002", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_005 = ConfiguredFeatures.register("fancy_oak_bees_005", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators(ImmutableList.of(Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<?, ?> FLOWER_WARM = ConfiguredFeatures.register("flower_warm", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(Configs.DEFAULT_FLOWER_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(4));
    public static final ConfiguredFeature<?, ?> FLOWER_DEFAULT = ConfiguredFeatures.register("flower_default", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(Configs.DEFAULT_FLOWER_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(2));
    public static final ConfiguredFeature<?, ?> FLOWER_FOREST = ConfiguredFeatures.register("flower_forest", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(ForestFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(100));
    public static final ConfiguredFeature<?, ?> FLOWER_SWAMP = ConfiguredFeatures.register("flower_swamp", ((ConfiguredFeature)Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE).tries(64).build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN = ConfiguredFeatures.register("flower_plain", Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(PlainsFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()));
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN_DECORATED = ConfiguredFeatures.register("flower_plain_decorated", ((ConfiguredFeature)((ConfiguredFeature)FLOWER_PLAIN.decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 15, 4))));
    private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_VEGETATION_CONFIGS = ImmutableList.of(() -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILAC), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.ROSE_BUSH), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.PEONY), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.NO_BONEMEAL_FLOWER.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE).tries(64).build()));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION_COMMON = ConfiguredFeatures.register("forest_flower_vegetation_common", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(ClampedIntProvider.create(UniformIntProvider.create(-1, 3), 0, 3))).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(5));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION = ConfiguredFeatures.register("forest_flower_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(ClampedIntProvider.create(UniformIntProvider.create(-3, 1), 0, 1))).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP).repeat(5));
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_BROWN = ConfiguredFeatures.register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(HUGE_BROWN_MUSHROOM.withChance(0.025f), HUGE_RED_MUSHROOM.withChance(0.05f), DARK_OAK.withChance(0.6666667f), BIRCH.withChance(0.2f), FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.DARK_OAK_TREE_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_RED = ConfiguredFeatures.register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(HUGE_RED_MUSHROOM.withChance(0.025f), HUGE_BROWN_MUSHROOM.withChance(0.05f), DARK_OAK.withChance(0.6666667f), BIRCH.withChance(0.2f), FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.DARK_OAK_TREE_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> WARM_OCEAN_VEGETATION = ConfiguredFeatures.register("warm_ocean_vegetation", ((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(ImmutableList.of(() -> Feature.CORAL_TREE.configure(FeatureConfig.DEFAULT), () -> Feature.CORAL_CLAW.configure(FeatureConfig.DEFAULT), () -> Feature.CORAL_MUSHROOM.configure(FeatureConfig.DEFAULT)))).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(20, 400.0, 0.0))));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_TREES = ConfiguredFeatures.register("forest_flower_trees", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(BIRCH_BEES_002.withChance(0.2f), FANCY_OAK_BEES_002.withChance(0.1f)), OAK_BEES_002)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(6, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TAIGA_VEGETATION = ConfiguredFeatures.register("taiga_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_BADLANDS = ConfiguredFeatures.register("trees_badlands", ((ConfiguredFeature)OAK.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(5, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SNOWY = ConfiguredFeatures.register("trees_snowy", ((ConfiguredFeature)SPRUCE.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SWAMP = ConfiguredFeatures.register("trees_swamp", ((ConfiguredFeature)((ConfiguredFeature)SWAMP_OAK.decorate((ConfiguredDecorator)Decorators.HEIGHTMAP_OCEAN_FLOOR)).decorate((ConfiguredDecorator)Decorator.WATER_DEPTH_THRESHOLD.configure(new WaterDepthThresholdDecoratorConfig(1))).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SHATTERED_SAVANNA = ConfiguredFeatures.register("trees_shattered_savanna", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8f)), OAK)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SAVANNA = ConfiguredFeatures.register("trees_savanna", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8f)), OAK)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(1, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BIRCH_TALL = ConfiguredFeatures.register("birch_tall", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SUPER_BIRCH_BEES_0002.withChance(0.5f)), BIRCH_BEES_0002)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_BIRCH = ConfiguredFeatures.register("trees_birch", ((ConfiguredFeature)BIRCH_BEES_0002.decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN_EDGE = ConfiguredFeatures.register("trees_mountain_edge", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666f), FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(3, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN = ConfiguredFeatures.register("trees_mountain", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666f), FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_WATER = ConfiguredFeatures.register("trees_water", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BIRCH_OTHER = ConfiguredFeatures.register("birch_other", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(BIRCH_BEES_0002.withChance(0.2f), FANCY_OAK_BEES_0002.withChance(0.1f)), OAK_BEES_0002)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> PLAIN_VEGETATION = ConfiguredFeatures.register("plain_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK_BEES_005.withChance(0.33333334f)), OAK_BEES_005)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.05f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE_EDGE = ConfiguredFeatures.register("trees_jungle_edge", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1f), JUNGLE_BUSH.withChance(0.5f)), JUNGLE_TREE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_GIANT_SPRUCE = ConfiguredFeatures.register("trees_giant_spruce", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.33333334f), PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_GIANT = ConfiguredFeatures.register("trees_giant", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.025641026f), MEGA_PINE.withChance(0.30769232f), PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE = ConfiguredFeatures.register("trees_jungle", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1f), JUNGLE_BUSH.withChance(0.5f), MEGA_JUNGLE_TREE.withChance(0.33333334f)), JUNGLE_TREE)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(50, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BAMBOO_VEGETATION = ConfiguredFeatures.register("bamboo_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.05f), JUNGLE_BUSH.withChance(0.15f), MEGA_JUNGLE_TREE.withChance(0.7f)), Feature.RANDOM_PATCH.configure(Configs.LUSH_GRASS_CONFIG))).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(30, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> MUSHROOM_FIELD_VEGETATION = ConfiguredFeatures.register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> HUGE_RED_MUSHROOM, () -> HUGE_BROWN_MUSHROOM)).decorate((ConfiguredDecorator)Decorators.SQUARE_HEIGHTMAP));
    public static final ConfiguredFeature<?, ?> ROOTED_AZALEA_TREES = ConfiguredFeatures.register("rooted_azalea_trees", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ROOT_SYSTEM.configure(new RootSystemFeatureConfig(() -> AZALEA_TREE, 3, 3, BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.ROOTED_DIRT.getDefaultState()), 20, 100, 3, 2, new SimpleBlockStateProvider(Blocks.HANGING_ROOTS.getDefaultState()), 20, 2)).decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).applyChance(2));
    private static final WeightedBlockStateProvider RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER = new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(Blocks.CAVE_VINES_PLANT.getDefaultState(), 4).add((BlockState)Blocks.CAVE_VINES_PLANT.getDefaultState().with(CaveVines.BERRIES, true), 1));
    private static final RandomizedIntBlockStateProvider RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER = new RandomizedIntBlockStateProvider((BlockStateProvider)new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(Blocks.CAVE_VINES.getDefaultState(), 4).add((BlockState)Blocks.CAVE_VINES.getDefaultState().with(CaveVines.BERRIES, true), 1)), CaveVinesHeadBlock.AGE, (IntProvider)UniformIntProvider.create(17, 25));
    public static final ConfiguredFeature<GrowingPlantFeatureConfig, ?> CAVE_VINE = ConfiguredFeatures.register("cave_vine", Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 20), 2).add(UniformIntProvider.create(1, 3), 3).add(UniformIntProvider.create(1, 7), 10).build(), Direction.DOWN, RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER, RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER, false)));
    public static final ConfiguredFeature<GrowingPlantFeatureConfig, ?> CAVE_VINE_IN_MOSS = ConfiguredFeatures.register("cave_vine_in_moss", Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 4), 5).add(UniformIntProvider.create(2, 8), 1).build(), Direction.DOWN, RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER, RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER, false)));
    public static final ConfiguredFeature<?, ?> CAVE_VINES = ConfiguredFeatures.register("cave_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)CAVE_VINE.decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(60));
    public static final ConfiguredFeature<SimpleBlockFeatureConfig, ?> MOSS_VEGETATION = ConfiguredFeatures.register("moss_vegetation", Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(Blocks.FLOWERING_AZALEA.getDefaultState(), 4).add(Blocks.AZALEA.getDefaultState(), 7).add(Blocks.MOSS_CARPET.getDefaultState(), 25).add(Blocks.GRASS.getDefaultState(), 50).add(Blocks.TALL_GRASS.getDefaultState(), 10)))));
    public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH = ConfiguredFeatures.register("moss_patch", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> MOSS_VEGETATION, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.0f, 5, 0.8f, UniformIntProvider.create(4, 7), 0.3f)));
    public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH_BONEMEAL = ConfiguredFeatures.register("moss_patch_bonemeal", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> MOSS_VEGETATION, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.0f, 5, 0.6f, UniformIntProvider.create(1, 2), 0.75f)));
    public static final ConfiguredFeature<?, ?> LUSH_CAVES_VEGETATION = ConfiguredFeatures.register("lush_caves_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)MOSS_PATCH.decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(40));
    public static final ConfiguredFeature<SimpleRandomFeatureConfig, ?> DRIPLEAF = ConfiguredFeatures.register("dripleaf", Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(ImmutableList.of(ConfiguredFeatures::createSmallDripleafFeature, () -> ConfiguredFeatures.createBigDripleafFeature(Direction.EAST), () -> ConfiguredFeatures.createBigDripleafFeature(Direction.WEST), () -> ConfiguredFeatures.createBigDripleafFeature(Direction.SOUTH), () -> ConfiguredFeatures.createBigDripleafFeature(Direction.NORTH)))));
    public static final ConfiguredFeature<?, ?> CLAY_WITH_DRIPLEAVES = ConfiguredFeatures.register("clay_with_dripleaves", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.CLAY.getDefaultState()), () -> DRIPLEAF, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8f, 2, 0.05f, UniformIntProvider.create(4, 7), 0.7f)));
    public static final ConfiguredFeature<?, ?> CLAY_POOL_WITH_DRIPLEAVES = ConfiguredFeatures.register("clay_pool_with_dripleaves", Feature.WATERLOGGED_VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.CLAY.getDefaultState()), () -> DRIPLEAF, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8f, 5, 0.1f, UniformIntProvider.create(4, 7), 0.7f)));
    public static final ConfiguredFeature<?, ?> LUSH_CAVES_CLAY = ConfiguredFeatures.register("lush_caves_clay", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> CLAY_WITH_DRIPLEAVES, () -> CLAY_POOL_WITH_DRIPLEAVES)).decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH_CEILING = ConfiguredFeatures.register("moss_patch_ceiling", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> CAVE_VINE_IN_MOSS, VerticalSurfaceType.CEILING, UniformIntProvider.create(1, 2), 0.0f, 5, 0.08f, UniformIntProvider.create(4, 7), 0.3f)));
    public static final ConfiguredFeature<?, ?> LUSH_CAVES_CEILING_VEGETATION = ConfiguredFeatures.register("lush_caves_ceiling_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)MOSS_PATCH_CEILING.decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(40));
    public static final ConfiguredFeature<?, ?> SPORE_BLOSSOM = ConfiguredFeatures.register("spore_blossom", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new SimpleBlockStateProvider(States.SPORE_BLOSSOM))).decorate((ConfiguredDecorator)Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> CLASSIC_VINES_CAVE_FEATURE = ConfiguredFeatures.register("classic_vines_cave_feature", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).range(Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(127));
    public static final ConfiguredFeature<?, ?> AMETHYST_GEODE = ConfiguredFeatures.register("amethyst_geode", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GEODE.configure(new GeodeFeatureConfig(new GeodeLayerConfig(new SimpleBlockStateProvider(States.AIR), new SimpleBlockStateProvider(States.AMETHYST_BLOCK), new SimpleBlockStateProvider(States.BUDDING_AMETHYST), new SimpleBlockStateProvider(States.CALCITE), new SimpleBlockStateProvider(States.SMOOTH_BASALT), ImmutableList.of(Blocks.SMALL_AMETHYST_BUD.getDefaultState(), Blocks.MEDIUM_AMETHYST_BUD.getDefaultState(), Blocks.LARGE_AMETHYST_BUD.getDefaultState(), Blocks.AMETHYST_CLUSTER.getDefaultState()), BlockTags.FEATURES_CANNOT_REPLACE.getId(), BlockTags.GEODE_INVALID_BLOCKS.getId()), new GeodeLayerThicknessConfig(1.7, 2.2, 3.2, 4.2), new GeodeCrackConfig(0.95, 2.0, 2), 0.35, 0.083, true, UniformIntProvider.create(4, 6), UniformIntProvider.create(3, 4), UniformIntProvider.create(1, 2), -16, 16, 0.05, 1)).uniformRange(YOffset.aboveBottom(6), YOffset.fixed(46))).spreadHorizontally()).applyChance(53));

    static DataPool.Builder<BlockState> pool() {
        return DataPool.builder();
    }

    private static ConfiguredFeature<GrowingPlantFeatureConfig, ?> createBigDripleafFeature(Direction blockDirection) {
        return Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 5), 2).add((UniformIntProvider)((Object)ConstantIntProvider.create(1)), 1).build(), Direction.UP, new SimpleBlockStateProvider((BlockState)Blocks.BIG_DRIPLEAF_STEM.getDefaultState().with(Properties.HORIZONTAL_FACING, blockDirection)), new SimpleBlockStateProvider((BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(Properties.HORIZONTAL_FACING, blockDirection)), true));
    }

    private static ConfiguredFeature<SimpleBlockFeatureConfig, ?> createSmallDripleafFeature() {
        return Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.SMALL_DRIPLEAF_EAST, 1).add(States.SMALL_DRIPLEAF_WEST, 1).add(States.SMALL_DRIPLEAF_NORTH, 1).add(States.SMALL_DRIPLEAF_SOUTH, 1))));
    }

    private static <FC extends FeatureConfig> ConfiguredFeature<FC, ?> register(String id, ConfiguredFeature<FC, ?> configuredFeature) {
        return Registry.register(BuiltinRegistries.CONFIGURED_FEATURE, id, configuredFeature);
    }

    public static final class States {
        protected static final BlockState GRASS = Blocks.GRASS.getDefaultState();
        protected static final BlockState FERN = Blocks.FERN.getDefaultState();
        protected static final BlockState PODZOL = Blocks.PODZOL.getDefaultState();
        protected static final BlockState COARSE_DIRT = Blocks.COARSE_DIRT.getDefaultState();
        protected static final BlockState MYCELIUM = Blocks.MYCELIUM.getDefaultState();
        protected static final BlockState SNOW_BLOCK = Blocks.SNOW_BLOCK.getDefaultState();
        protected static final BlockState ICE = Blocks.ICE.getDefaultState();
        protected static final BlockState OAK_LOG = Blocks.OAK_LOG.getDefaultState();
        protected static final BlockState OAK_LEAVES = Blocks.OAK_LEAVES.getDefaultState();
        protected static final BlockState OAK_SAPLING = Blocks.OAK_SAPLING.getDefaultState();
        protected static final BlockState JUNGLE_LOG = Blocks.JUNGLE_LOG.getDefaultState();
        protected static final BlockState JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.getDefaultState();
        protected static final BlockState JUNGLE_SAPLING = Blocks.JUNGLE_SAPLING.getDefaultState();
        protected static final BlockState SPRUCE_LOG = Blocks.SPRUCE_LOG.getDefaultState();
        protected static final BlockState SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.getDefaultState();
        protected static final BlockState SPRUCE_SAPLING = Blocks.SPRUCE_SAPLING.getDefaultState();
        protected static final BlockState ACACIA_LOG = Blocks.ACACIA_LOG.getDefaultState();
        protected static final BlockState ACACIA_LEAVES = Blocks.ACACIA_LEAVES.getDefaultState();
        protected static final BlockState ACACIA_SAPLING = Blocks.ACACIA_SAPLING.getDefaultState();
        protected static final BlockState BIRCH_LOG = Blocks.BIRCH_LOG.getDefaultState();
        protected static final BlockState BIRCH_LEAVES = Blocks.BIRCH_LEAVES.getDefaultState();
        protected static final BlockState BIRCH_SAPLING = Blocks.BIRCH_SAPLING.getDefaultState();
        protected static final BlockState DARK_OAK_LOG = Blocks.DARK_OAK_LOG.getDefaultState();
        protected static final BlockState DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.getDefaultState();
        protected static final BlockState DARK_OAK_SAPLING = Blocks.DARK_OAK_SAPLING.getDefaultState();
        protected static final BlockState GRASS_BLOCK = Blocks.GRASS_BLOCK.getDefaultState();
        protected static final BlockState LARGE_FERN = Blocks.LARGE_FERN.getDefaultState();
        protected static final BlockState TALL_GRASS = Blocks.TALL_GRASS.getDefaultState();
        protected static final BlockState LILAC = Blocks.LILAC.getDefaultState();
        protected static final BlockState ROSE_BUSH = Blocks.ROSE_BUSH.getDefaultState();
        protected static final BlockState PEONY = Blocks.PEONY.getDefaultState();
        protected static final BlockState BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.getDefaultState();
        protected static final BlockState RED_MUSHROOM = Blocks.RED_MUSHROOM.getDefaultState();
        protected static final BlockState PACKED_ICE = Blocks.PACKED_ICE.getDefaultState();
        protected static final BlockState BLUE_ICE = Blocks.BLUE_ICE.getDefaultState();
        protected static final BlockState LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.getDefaultState();
        protected static final BlockState BLUE_ORCHID = Blocks.BLUE_ORCHID.getDefaultState();
        protected static final BlockState POPPY = Blocks.POPPY.getDefaultState();
        protected static final BlockState DANDELION = Blocks.DANDELION.getDefaultState();
        protected static final BlockState DEAD_BUSH = Blocks.DEAD_BUSH.getDefaultState();
        protected static final BlockState MELON = Blocks.MELON.getDefaultState();
        protected static final BlockState PUMPKIN = Blocks.PUMPKIN.getDefaultState();
        protected static final BlockState SWEET_BERRY_BUSH = (BlockState)Blocks.SWEET_BERRY_BUSH.getDefaultState().with(SweetBerryBushBlock.AGE, 3);
        protected static final BlockState FIRE = Blocks.FIRE.getDefaultState();
        protected static final BlockState SOUL_FIRE = Blocks.SOUL_FIRE.getDefaultState();
        protected static final BlockState NETHERRACK = Blocks.NETHERRACK.getDefaultState();
        protected static final BlockState SOUL_SOIL = Blocks.SOUL_SOIL.getDefaultState();
        protected static final BlockState CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.getDefaultState();
        protected static final BlockState LILY_PAD = Blocks.LILY_PAD.getDefaultState();
        protected static final BlockState SNOW = Blocks.SNOW.getDefaultState();
        protected static final BlockState JACK_O_LANTERN = Blocks.JACK_O_LANTERN.getDefaultState();
        protected static final BlockState SUNFLOWER = Blocks.SUNFLOWER.getDefaultState();
        protected static final BlockState CACTUS = Blocks.CACTUS.getDefaultState();
        protected static final BlockState SUGAR_CANE = Blocks.SUGAR_CANE.getDefaultState();
        protected static final BlockState RED_MUSHROOM_BLOCK = (BlockState)Blocks.RED_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.DOWN, false);
        protected static final BlockState BROWN_MUSHROOM_BLOCK = (BlockState)((BlockState)Blocks.BROWN_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.UP, true)).with(MushroomBlock.DOWN, false);
        protected static final BlockState MUSHROOM_STEM = (BlockState)((BlockState)Blocks.MUSHROOM_STEM.getDefaultState().with(MushroomBlock.UP, false)).with(MushroomBlock.DOWN, false);
        protected static final FluidState WATER_FLUID = Fluids.WATER.getDefaultState();
        protected static final FluidState LAVA_FLUID = Fluids.LAVA.getDefaultState();
        protected static final BlockState WATER_BLOCK = Blocks.WATER.getDefaultState();
        protected static final BlockState LAVA_BLOCK = Blocks.LAVA.getDefaultState();
        protected static final BlockState DIRT = Blocks.DIRT.getDefaultState();
        protected static final BlockState GRAVEL = Blocks.GRAVEL.getDefaultState();
        protected static final BlockState GRANITE = Blocks.GRANITE.getDefaultState();
        protected static final BlockState DIORITE = Blocks.DIORITE.getDefaultState();
        protected static final BlockState ANDESITE = Blocks.ANDESITE.getDefaultState();
        protected static final BlockState COAL_ORE = Blocks.COAL_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_COAL_ORE = Blocks.DEEPSLATE_COAL_ORE.getDefaultState();
        protected static final BlockState COPPER_ORE = Blocks.COPPER_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_COPPER_ORE = Blocks.DEEPSLATE_COPPER_ORE.getDefaultState();
        protected static final BlockState IRON_ORE = Blocks.IRON_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_IRON_ORE = Blocks.DEEPSLATE_IRON_ORE.getDefaultState();
        protected static final BlockState GOLD_ORE = Blocks.GOLD_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_GOLD_ORE = Blocks.DEEPSLATE_GOLD_ORE.getDefaultState();
        protected static final BlockState REDSTONE_ORE = Blocks.REDSTONE_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_REDSTONE_ORE = Blocks.DEEPSLATE_REDSTONE_ORE.getDefaultState();
        protected static final BlockState DIAMOND_ORE = Blocks.DIAMOND_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_DIAMOND_ORE = Blocks.DEEPSLATE_DIAMOND_ORE.getDefaultState();
        protected static final BlockState LAPIS_ORE = Blocks.LAPIS_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_LAPIS_ORE = Blocks.DEEPSLATE_LAPIS_ORE.getDefaultState();
        protected static final BlockState STONE = Blocks.STONE.getDefaultState();
        protected static final BlockState EMERALD_ORE = Blocks.EMERALD_ORE.getDefaultState();
        protected static final BlockState DEEPSLATE_EMERALD_ORE = Blocks.DEEPSLATE_EMERALD_ORE.getDefaultState();
        protected static final BlockState INFESTED_STONE = Blocks.INFESTED_STONE.getDefaultState();
        protected static final BlockState INFESTED_DEEPSLATE = Blocks.INFESTED_DEEPSLATE.getDefaultState();
        protected static final BlockState SAND = Blocks.SAND.getDefaultState();
        protected static final BlockState CLAY = Blocks.CLAY.getDefaultState();
        protected static final BlockState MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.getDefaultState();
        protected static final BlockState SEAGRASS = Blocks.SEAGRASS.getDefaultState();
        protected static final BlockState MAGMA_BLOCK = Blocks.MAGMA_BLOCK.getDefaultState();
        protected static final BlockState SOUL_SAND = Blocks.SOUL_SAND.getDefaultState();
        protected static final BlockState NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.getDefaultState();
        protected static final BlockState NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.getDefaultState();
        protected static final BlockState BLACKSTONE = Blocks.BLACKSTONE.getDefaultState();
        protected static final BlockState ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.getDefaultState();
        protected static final BlockState BASALT = Blocks.BASALT.getDefaultState();
        protected static final BlockState CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.getDefaultState();
        protected static final BlockState WARPED_FUNGUS = Blocks.WARPED_FUNGUS.getDefaultState();
        protected static final BlockState WARPED_ROOTS = Blocks.WARPED_ROOTS.getDefaultState();
        protected static final BlockState NETHER_SPROUTS = Blocks.NETHER_SPROUTS.getDefaultState();
        protected static final BlockState AIR = Blocks.AIR.getDefaultState();
        protected static final BlockState AMETHYST_BLOCK = Blocks.AMETHYST_BLOCK.getDefaultState();
        protected static final BlockState BUDDING_AMETHYST = Blocks.BUDDING_AMETHYST.getDefaultState();
        protected static final BlockState CALCITE = Blocks.CALCITE.getDefaultState();
        protected static final BlockState SMOOTH_BASALT = Blocks.SMOOTH_BASALT.getDefaultState();
        protected static final BlockState TUFF = Blocks.TUFF.getDefaultState();
        protected static final BlockState SPORE_BLOSSOM = Blocks.SPORE_BLOSSOM.getDefaultState();
        protected static final BlockState SMALL_DRIPLEAF_EAST = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.EAST);
        protected static final BlockState SMALL_DRIPLEAF_WEST = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.WEST);
        protected static final BlockState SMALL_DRIPLEAF_NORTH = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.NORTH);
        protected static final BlockState SMALL_DRIPLEAF_SOUTH = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.SOUTH);
        protected static final BlockState BIG_DRIPLEAF_EAST = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.EAST);
        protected static final BlockState BIG_DRIPLEAF_WEST = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.WEST);
        protected static final BlockState BIG_DRIPLEAF_NORTH = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.NORTH);
        protected static final BlockState BIG_DIRPLEAF_SOUTH = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.SOUTH);
        protected static final BlockState DEEPSLATE = Blocks.DEEPSLATE.getDefaultState();
        protected static final BlockState AZALEA_LEAVES = Blocks.AZALEA_LEAVES.getDefaultState();
        protected static final BlockState FLOWERING_AZALEA_LEAVES = Blocks.FLOWERING_AZALEA_LEAVES.getDefaultState();
        protected static final BlockState AZALEA = Blocks.AZALEA.getDefaultState();
    }

    protected static final class Decorators {
        public static final BeehiveTreeDecorator VERY_RARE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.002f);
        public static final BeehiveTreeDecorator REGULAR_BEEHIVES_TREES = new BeehiveTreeDecorator(0.02f);
        public static final BeehiveTreeDecorator MORE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.05f);
        public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.MOTION_BLOCKING));
        public static final ConfiguredDecorator<HeightmapDecoratorConfig> TOP_SOLID_HEIGHTMAP = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.OCEAN_FLOOR_WG));
        public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_WORLD_SURFACE = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.WORLD_SURFACE_WG));
        public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_OCEAN_FLOOR = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.OCEAN_FLOOR));
        public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_SPREAD_DOUBLE = Decorator.HEIGHTMAP_SPREAD_DOUBLE.configure(new HeightmapDecoratorConfig(Heightmap.Type.MOTION_BLOCKING));
        public static final RangeDecoratorConfig BOTTOM_TO_TOP = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.getBottom(), YOffset.getTop()));
        public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_10 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(10), YOffset.belowTop(10)));
        public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_8 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(8), YOffset.belowTop(8)));
        public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_4 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(4), YOffset.belowTop(4)));
        public static final RangeDecoratorConfig BOTTOM_TO_60 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.getBottom(), YOffset.fixed(60)));
        public static final ConfiguredDecorator<?> FIRE = (ConfiguredDecorator)((ConfiguredDecorator)Decorator.RANGE.configure(BOTTOM_TO_TOP_OFFSET_4).spreadHorizontally()).repeatRandomly(5);
        public static final ConfiguredDecorator<?> SPREAD_32_ABOVE = Decorator.SPREAD_32_ABOVE.configure(NopeDecoratorConfig.INSTANCE);
        public static final ConfiguredDecorator<?> HEIGHTMAP_OCEAN_FLOOR_NO_WATER = HEIGHTMAP_OCEAN_FLOOR.decorate((ConfiguredDecorator)Decorator.WATER_DEPTH_THRESHOLD.configure(new WaterDepthThresholdDecoratorConfig(0)));
        public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER = (ConfiguredDecorator)HEIGHTMAP_OCEAN_FLOOR_NO_WATER.spreadHorizontally();
        public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP = (ConfiguredDecorator)HEIGHTMAP.spreadHorizontally();
        public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP_SPREAD_DOUBLE = (ConfiguredDecorator)HEIGHTMAP_SPREAD_DOUBLE.spreadHorizontally();
        public static final ConfiguredDecorator<?> SQUARE_TOP_SOLID_HEIGHTMAP = (ConfiguredDecorator)TOP_SOLID_HEIGHTMAP.spreadHorizontally();
        public static final ConfiguredDecorator<?> DARK_OAK_TREE_HEIGHTMAP = HEIGHTMAP_OCEAN_FLOOR_NO_WATER.decorate((ConfiguredDecorator)Decorator.DARK_OAK_TREE.configure(DecoratorConfig.DEFAULT));

        protected Decorators() {
        }
    }

    public static final class Configs {
        public static final RandomPatchFeatureConfig GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.GRASS), SimpleBlockPlacer.INSTANCE).tries(32).build();
        public static final RandomPatchFeatureConfig TAIGA_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.GRASS, 1).add(States.FERN, 4)), SimpleBlockPlacer.INSTANCE).tries(32).build();
        public static final RandomPatchFeatureConfig LUSH_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.GRASS, 3).add(States.FERN, 1)), SimpleBlockPlacer.INSTANCE).blacklist(ImmutableSet.of(States.PODZOL)).tries(32).build();
        public static final RandomPatchFeatureConfig DEFAULT_FLOWER_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.POPPY, 2).add(States.DANDELION, 1)), SimpleBlockPlacer.INSTANCE).tries(64).build();
        public static final RandomPatchFeatureConfig DEAD_BUSH_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE).tries(4).build();
        public static final RandomPatchFeatureConfig SWEET_BERRY_BUSH_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE).tries(64).whitelist(ImmutableSet.of(States.GRASS_BLOCK.getBlock())).cannotProject().build();
        public static final RandomPatchFeatureConfig TALL_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.TALL_GRASS), new DoublePlantPlacer()).tries(64).cannotProject().build();
        public static final RandomPatchFeatureConfig SUGAR_CANE_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SUGAR_CANE), new ColumnPlacer(BiasedToBottomIntProvider.create(2, 4))).tries(20).spreadX(4).spreadY(0).spreadZ(4).cannotProject().needsWater().build();
        public static final SpringFeatureConfig LAVA_SPRING_CONFIG = new SpringFeatureConfig(States.LAVA_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF, new Block[0]));
        public static final SpringFeatureConfig ENCLOSED_NETHER_SPRING_CONFIG = new SpringFeatureConfig(States.LAVA_FLUID, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
        public static final BlockPileFeatureConfig CRIMSON_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.CRIMSON_ROOTS, 87).add(States.CRIMSON_FUNGUS, 11).add(States.WARPED_FUNGUS, 1)));
        public static final BlockPileFeatureConfig WARPED_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.pool().add(States.WARPED_ROOTS, 85).add(States.CRIMSON_ROOTS, 1).add(States.WARPED_FUNGUS, 13).add(States.CRIMSON_FUNGUS, 1)));
        public static final BlockPileFeatureConfig NETHER_SPROUTS_CONFIG = new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.NETHER_SPROUTS));
    }
}

